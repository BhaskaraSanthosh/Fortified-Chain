const E:Function;
const D:Function;
hashfunction H;
const XOR:Function;
const POW:Function;
usertype key;
const APN:Function;
const RIa,RIb,PUa,PUb,PUedge,IDdev,IDhc,RNhc,PRa,DIsigb,SIid,GIid,Q1,V1,V3,IDa;

const Hdev,RIa1,RIa;

macro Hdev = H(IDdev);

macro RIa1 = XOR(RNhc,Hdev,IDhc);

macro RIa = H(RIa1);


protocol MyProto(DA,Hybrid,DB)
{
role DA {
fresh RN:Nonce;
const IDdev,DIsig,MATdiv,IDa;
fresh RNa:Nonce;
const msg,DIsigb,P1,RIa,PRa,IDa;
const Temp,Temp1;
fresh PRa,PUedge,PUa:key;
fresh SessionKey,Timestamp:key;
const V0,V1,V2,V3,V4;
recv_!2(Hybrid,DA,P1);

recv_!4(DB,DA,Q1);

macro V0 = E(PUedge,H(IDdev));
macro Temp = H(RIa);
macro Temp1 = E(PRa,Temp);
macro DIsig = APN(Temp1,RIa);
macro V1 = E(PUb,RNa,MATdiv,IDa,DIsig);
macro V2 = D(PRa,SessionKey,IDb,DIsigb,Timestamp);
macro V3 = E(SessionKey,msg);
macro V4 =  D(PRa,IDa,RIa,GIid,SIid,MATdiv);

send_!1(DA,Hybrid,V0);
send_!5(DA,DB,V1,V3);
claim_DA2(DA,Secret,SessionKey);
claim_DA3(DA,Niagree);
claim_DA4(DA, Nisynch);
}
role Hybrid {
fresh PRedge,PUedge,PUa,PUb:key;
fresh RNhc,MATdiv,GIid,SIid:Nonce;
const IDhc,RIa,IDa,RIa1,Hdev,MATdivb,MATdiv,RIb,IDb;
const P0,P1,P2;
const IDdev;
recv_!1(DA,Hybrid,V0);

macro P0 = D(PRedge,H(IDdev));
macro Hdev = H(IDdev);
macro RIa1 = XOR(RNhc,Hdev,IDhc);
macro RIa = H(RIa1);
macro IDa = XOR(RIa,Hdev);
macro  P1 = E(PUa,IDa,RIa,GIid,SIid,MATdiv);
macro P2 = E(PUb,IDb,RIb,GIid,SIid,MATdivb);
send_!2(Hybrid,DA,P1);
send_!3(Hybrid,DB,P2);
claim_Hybrid2(Hybrid,Secret,PRedge);
claim_Hybrid3(Hybrid,Niagree);
claim_Hybrid4(Hybrid,Nisynch);
}

role DB {
fresh PRb,PUedge,PUa,PUb,DIsigb:key;
fresh RNb:Nonce;
const IDdevb,DIsigb,MATdivb,Q1,Q2,Q3,Q4,MATdivb,MATdiv,IDb;
fresh RIb,RIa,RNb:Nonce;
const Temp2,Temp3,msg,RNa;
fresh SessionKey,Timestamp:key;
recv_!3(Hybrid,DB,P2);

recv_!5(DA,DB,V1,V3);

macro Temp3 = D(PUa,DIsig);
macro Temp2 = H(RIa); 

macro Q2 = D(PRb,IDb,RIb,GIid,SIid,MATdivb);
macro Q3 = D(PUb,RNa,MATdiv,IDa,DIsig);
match(MATdiv,MATdivb);
match(Temp2,Temp3);
macro SessionKey = POW(RNa,RNb);
macro Q1 = E(PUa,SessionKey,IDb,DIsigb,Timestamp);
macro Q4 = D(SessionKey,msg);
send_!4(DB,DA,Q1);
claim_DB2(DB,Secret,msg);
claim_DB3(DB,Niagree);
claim_DB4(DB, Nisynch);
}
}